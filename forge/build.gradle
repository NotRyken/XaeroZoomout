plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

archivesBaseName = "${rootProject.projectArchiveBaseName}-forge"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(':common').loom.accessWidenerPath

    forge {
        mixinConfig 'xaerozoomout-common.mixins.json'
        mixinConfig 'xaerozoomout-forge.mixins.json'
    }
}

configurations {
    common
    shadowCommon
    // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forgeVersion}"

    // Xaero's World Map.
    modImplementation "maven.modrinth:xaeros-world-map:${project.xwmForgeVersion}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowCommon(project(path: ':common', configuration: 'transformProductionFabric')) { transitive false }

    // Nullable annotations.
    implementation 'org.jetbrains:annotations:23.0.0'
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version
    }
}

shadowJar {
    exclude 'fabric.mod.json'
    exclude 'architectury.common.json'

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)

}

jar {
    archiveClassifier.set('dev')
}

sourcesJar {
    def commonSources = project(':common').sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
